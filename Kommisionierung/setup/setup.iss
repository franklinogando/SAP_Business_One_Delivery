; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
AllowNoIcons=yes
AppName="{code:GetApplicationUID|}"
AppVerName="{code:GetApplicationUID|} 1.00.00.00"
AppPublisher=DResearch GmbH
AppPublisherURL=http://www.dresearch.de/
AppSupportURL=http://www.dresearch.de/
AppUpdatesURL=http://www.dresearch.de/
DefaultDirName="{code:GetDefaultDirName|}"
DefaultGroupName="{code:GetApplicationUID|}"
DisableDirPage=yes
DisableFinishedPage=no
DisableProgramGroupPage=yes
DisableReadyPage=yes
DisableStartupPrompt=yes
OutputBaseFilename=setup
OutputDir=.
Compression=lzma
ShowLanguageDialog=no
SolidCompression=yes
VersionInfoDescription="{code:GetApplicationUID| Setup}"

[Languages]
Name: eng; MessagesFile: compiler:Default.isl
Name: bra; MessagesFile: compiler:Languages\BrazilianPortuguese.isl
Name: cat; MessagesFile: compiler:Languages\Catalan.isl
Name: cze; MessagesFile: compiler:Languages\Czech.isl
Name: dan; MessagesFile: compiler:Languages\Danish.isl
Name: dut; MessagesFile: compiler:Languages\Dutch.isl
Name: fre; MessagesFile: compiler:Languages\French.isl
Name: ger; MessagesFile: compiler:Languages\German.isl
Name: hun; MessagesFile: compiler:Languages\Hungarian.isl
Name: ita; MessagesFile: compiler:Languages\Italian.isl
Name: nor; MessagesFile: compiler:Languages\Norwegian.isl
Name: pol; MessagesFile: compiler:Languages\Polish.isl
Name: por; MessagesFile: compiler:Languages\Portuguese.isl
Name: rus; MessagesFile: compiler:Languages\Russian.isl
Name: slo; MessagesFile: compiler:Languages\Slovenian.isl

[Dirs]
; place here all the additional directories exclusive the application directory which inno setup should create

[Files]
; place here all the files which inno setup should embed while compiling end extract while executing
; application file
Source: ..\bin\Debug\Kommisionierung.exe; DestDir: {app}; Flags: ignoreversion

[Icons]
; place here all the .ico file names which do you want create at setup time

[INI]
; place here all the .ini file names which you want to create at setup time

[Registry]
; place here all the aditional registry entries which inno setup should create at installtime or delete at unistall time

[Run]
; place here all the additional executables which must be run at setup time

[UninstallRun]
; place here all the additional executables which must be run at clean time

[UninstallDelete]
; place here all the additional files which should be deleted at clean time

[Code]
////////////////////////////////////////////////////////////////////////////////
// define here all application unspecific external library functions
////////////////////////////////////////////////////////////////////////////////

function LoadLibrary(pszFileName: PChar): Integer;
external 'LoadLibraryA@kernel32.dll stdcall setuponly';

function FreeLibrary(hModule: Integer): Integer;
external 'FreeLibrary@kernel32.dll stdcall setuponly';

function EndInstall(): Integer;
external 'EndInstall@AddOnInstallAPI.dll stdcall setuponly delayload';

////////////////////////////////////////////////////////////////////////////////
// define here all the application unspecific global variables
// which must be correct initialized while the SetupInitialization is running
////////////////////////////////////////////////////////////////////////////////
var
    global_install_path: string;
    global_library_name: string;
    global_registry_key: string;
    global_return_value: integer;

////////////////////////////////////////////////////////////////////////////////
// define here all the application unspecific getters for the global variables
////////////////////////////////////////////////////////////////////////////////

function GetInstallPath() : string;
begin
    Result := global_install_path;
end;

function GetLibraryName() : string;
begin
    Result := global_library_name;
end;

function GetRegistryKey() : string;
begin
    Result := global_registry_key;
end;

function GetReturnValue() : integer;
begin
    Result := global_return_value;
end;

////////////////////////////////////////////////////////////////////////////////
// define here all the function which are called from any inno setup section
////////////////////////////////////////////////////////////////////////////////

function GetDefaultDirName( const dummy : string ) : string;
begin
    Result := GetInstallPath();
end;

function GetApplicationUID( const dummy : string ) : string;
begin
    // return an application specific unique identifier
    //Result := 'Inquiry';
    Result := 'EuroNorm KLR'
end;

////////////////////////////////////////////////////////////////////////////////
// define here all the application unspecific setters for the global variables
////////////////////////////////////////////////////////////////////////////////

procedure SetInstallPath( const install_path : string );
begin
    global_install_path := install_path;
end;

procedure SetLibraryName(const library_name : string);
begin
    global_library_name := library_name;
end;

procedure SetRegistryKey(const registry_key : string);
begin
    global_registry_key := registry_key;
end;

procedure SetReturnValue(const return_value : integer);
begin
    global_return_value := return_value;
end;

////////////////////////////////////////////////////////////////////////////////
// define here all the application unspecific logging methodes
////////////////////////////////////////////////////////////////////////////////

procedure DebugInfo(const text : string);
begin
    Log('#DRS#debug# ' + text);
end;

procedure ErrorInfo(const text : string);
begin
    Log('#DRS#error# ' + text);
end;

////////////////////////////////////////////////////////////////////////////////
// define here all the other application unspecific helper methodes
////////////////////////////////////////////////////////////////////////////////

function LoadDll(const dll_name : string; var dll_handle : Longint): Boolean;
// this methode logs the load of the library with the given dll_name and returns
// the handle to the library and true if the load operation was successfull
begin
    // try to load the dll
    DebugInfo('load the dll ' + dll_name);
    dll_handle := LoadLibrary(dll_name);

    // check if the load of the dll was successfull
    if (dll_handle = 0) then begin
        ErrorInfo('can not load the dll ' + dll_name);
        Result := False;
    end else begin
        DebugInfo('the dll ' + dll_name + ' was successfully loaded');
        Result := True;
    end;
end;

function ExtractNextTextToken(var text : string; const seperator : char): string;
// this methode extracts and returns all the leading characters up to the first
// occurrence of the given seperator character from the given text
var
    token_length: integer;
begin
    // get the length of the next token
    token_length := Pos(seperator, text);

    // check if there was no seperator char in the given text
    if (token_length = 0) then begin
        // assume that the next seperator char is at the end of the given text
        token_length := Length(text) + 1;
    end

    // copy the complete token into the result
    Result := Trim(Copy(text, 1, token_length - 1));

    // log the next extracted text token
    DebugInfo('extracting text token : ' +  Result);

    // delete the complete token and the seperator char from the given text
    Delete(text, 1, token_length);
end;

function GetRegistryStringValue( const registry_entry_name : string ) : string;
// this methode returns the value of the in the registry key of this application
// defined registry string entry with the given registry_entry_name
var
    registry_entry_text : string;
begin
    // try to read the registry entry
    DebugInfo('try to read the registry entry ' + registry_entry_name);
    if (RegQueryStringValue(HKEY_LOCAL_MACHINE, GetRegistryKey(), registry_entry_name, registry_entry_text) = True) then begin
        DebugInfo('the registry entry ' + registry_entry_name + ' was successfully read');
    end else begin
        ErrorInfo('can not find the registry entry ' + registry_entry_name);
    end
    // remove all the leading and trailing quotes from the registry entry
    Result := RemoveQuotes(registry_entry_text);
end;

////////////////////////////////////////////////////////////////////////////////
// define here all the overriden inno setup event methodes
////////////////////////////////////////////////////////////////////////////////

function InitializeSetup(): Boolean;
var
    command_line_argument: string;
    demanded_setup_action: string;
    uninstaller_file_name: string;
    uninstaller_exit_code: integer;
begin
    DebugInfo('InitializeSetup is running');

    // initialize the return value with the inno setup exit code for cancel
    SetReturnValue(1);

    // initialize the registry key
    SetRegistryKey('Software\Microsoft\Windows\CurrentVersion\Uninstall\' + GetApplicationUID('') + '_is1');

    // get only the very last command line parameter
    command_line_argument := ParamStr(ParamCount());

    // get the demanded setup action
    demanded_setup_action := LowerCase(ExtractNextTextToken(command_line_argument, '|'));
    
    // check if the install or the uninstall process must be executed
    if (RegKeyExists(HKEY_LOCAL_MACHINE, GetRegistryKey()) = False) then begin
    
        if (demanded_setup_action = 'install') then begin
            // extract the install_path and the name of the library_file given from sbo
            SetInstallPath(ExtractNextTextToken(command_line_argument, '|'));
            SetLibraryName(ExtractNextTextToken(command_line_argument, '|'));

            // return true to start the execution of the installation wizzard
            Result := True;
        end else begin
            ErrorInfo('the given setup action ' + demanded_setup_action + ' is not possible now');

            // return false to skip the execution of the installation wizzard
            Result := False;
        end

    end else begin

        if (demanded_setup_action = 'remove') then begin
            // get the value of the registry entry AddOnInstallAPI of this application
            SetLibraryName(GetRegistryStringValue('AddOnInstallAPI'));

            // get the value of the registry entry UninstallString of this application
            uninstaller_file_name := GetRegistryStringValue('UninstallString');

            // execute the uninstaller file and evaluate the returned exit code
            DebugInfo('execute the uninstaller ' + uninstaller_file_name);
            if (FileExists(uninstaller_file_name) = false) then begin
                ErrorInfo('can not find the uninstaller ' + uninstaller_file_name);
            end else if (Exec(uninstaller_file_name, '/LOG /VERYSILENT', '', SW_SHOW, ewWaitUntilTerminated, uninstaller_exit_code) = false) then begin
                ErrorInfo('the uninstaller ' + uninstaller_file_name + ' returned the execution code ' + IntToStr(uninstaller_exit_code));
            end else begin
                DebugInfo('the uninstaller ' + uninstaller_file_name + ' returned the execution code ' + IntToStr(uninstaller_exit_code));
                SetReturnValue(uninstaller_exit_code);
            end

            // return false to skip the execution of the installation wizzard
            Result := False;
        end else begin
            ErrorInfo('the given setup action ' + demanded_setup_action + ' is not possible now');

            // return false to skip the execution of the installation wizzard
            Result := False;
        end
    end
end;

function GetCustomSetupExitCode(): Integer;
begin
    DebugInfo('GetCustomSetupExitCode is running');

    // write the library name into the registry entry AddOnInstallAPI
    if (RegWriteStringValue(HKEY_LOCAL_MACHINE, GetRegistryKey(), 'AddOnInstallAPI', GetLibraryName())) then begin
        DebugInfo('the registry entry AddOnInstallAPI was successfully created');
    end else begin
        ErrorInfo('can not create the registry entry AddOnInstallAPI');
    end

    // this inno setup methode is only executed when no error was detected
    SetReturnValue(0);
    
    Result := 0;
end;

procedure DeInitializeSetup();
var
    dll_handle : LongInt;
    dll_result : LongInt;
begin
    DebugInfo('DeInitializeSetup is running');

    // check if the install or the uninstall process returns any error
    if (GetReturnValue() <> 0) then begin
        ErrorInfo('the install or the uninstall process got the following exit code ' + IntToStr(GetReturnValue()));
    // check if the library_file exists
    end else if (FileExists(GetLibraryName()) = False) then begin
        ErrorInfo('the sbo library ' + GetLibraryName() + ' does not exists');
    // try to load the existing library
    end else if (LoadDll(GetLibraryName(), dll_handle) = True) then begin
        // call the library function EndInstall()
        DebugInfo('call the sbo library function EndInstall()');
        dll_result := EndInstall();

        // check the error code of the library function
        if (dll_result = 0) then begin
            DebugInfo('EndInstall returns the value ' + IntToStr(dll_result));
        end else begin
            ErrorInfo('EndInstall returns the value ' + IntToStr(dll_result));
        end;

        // free the library if load was successfull
        DebugInfo('free the sbo library file ' + GetLibraryName());
        FreeLibrary(dll_handle);
    end
end;
